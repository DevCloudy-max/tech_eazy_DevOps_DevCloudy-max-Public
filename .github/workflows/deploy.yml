name: Deploy Java application via Terraform

on:
  push:
    branches:
      - main
      - feature/pipline-enhancement
    tags:
      - 'deploy-dev'
      - 'deploy-prod'

  workflow_dispatch:
    inputs:
      stage:
        description: 'Deployment stage (dev or prod)'
        required: false

jobs:
  Terraform-deployment:
    name: terraform deploy
    runs-on: ubuntu-latest

    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.6.6

      - name: Determine stage (manual or inferred)
        id: get-stage
        run: |
          echo "Resolving deployment stage..."
          if [[ -n "${{ github.event.inputs.stage }}" ]]; then
            echo "stage=${{ github.event.inputs.stage }}" >> "$GITHUB_OUTPUT"
          elif [[ "${GITHUB_REF}" == "refs/heads/main" || "${GITHUB_REF}" == "refs/heads/feature/pipline-enhancement" ]]; then
            echo "stage=dev" >> "$GITHUB_OUTPUT"
          elif [[ "${GITHUB_REF}" == "refs/tags/deploy-prod" ]]; then
            echo "stage=prod" >> "$GITHUB_OUTPUT"
          elif [[ "${GITHUB_REF}" == "refs/tags/deploy-dev" ]]; then
            echo "stage=dev" >> "$GITHUB_OUTPUT"
          else
            echo "❌ Unable to determine stage"
            exit 1
          fi

      - name: Terraform Init
        run: terraform init

     
      - name: Terraform Formatting
        run: terraform fmt -check

      - name: Terraform Validate
        run: terraform validate
 
     
      - name: Dynamic Terraform Import for Existing Resources
        run: |
          STAGE="${{ steps.get-stage.outputs.stage }}"

          echo "Importing existing AWS resources for stage: $STAGE"

          # IAM Roles
          terraform import aws_iam_role.read_only_role read-only-role || echo "read-only-role already imported or not found"
          terraform import aws_iam_role.write_only_role write-only-role || echo " write-only-role already imported or not found"

          # IAM Instance Profiles
          terraform import aws_iam_instance_profile.ec2_instance_profile ec2-write-only-profile || echo " ec2-write-only-profile already imported or not found"
          terraform import aws_iam_instance_profile.read_instance_profile ec2-read-only-profile || echo " ec2-read-only-profile already imported or not found"

          # EC2 Key Pair
          terraform import aws_key_pair.generated_key "$STAGE-key" || echo " $STAGE-key keypair already imported or not found"

          # Security Group
          terraform import aws_security_group.web_sg "web-access-$STAGE" || echo " web-access-$STAGE SG already imported or not found"
  
      - name: Terraform Plan
        run: terraform plan -var="enable_protection=false" -var-file="${{ steps.get-stage.outputs.stage }}_config.tfvars"

      - name: Terraform Apply
        run: terraform apply -auto-approve -var="enable_protection=false" -var-file="${{ steps.get-stage.outputs.stage }}_config.tfvars"

      - name: Wait for EC2 to be ready on port 80 !!!
        run: |
          set +e
          EC2_PUBLIC_IP=$(terraform output -raw aws_Main_instance_Public_Ip | grep -Eo '([0-9]{1,3}\.){3}[0-9]{1,3}')
          echo "EC2 IP: $EC2_PUBLIC_IP"
          echo "Sleeping 80 seconds to let app boot..."
          sleep 80
          echo "Curling http://$EC2_PUBLIC_IP"
          STATUS=$(curl -s -o /dev/null -w "%{http_code}" http://$EC2_PUBLIC_IP)
          echo "HTTP Status: $STATUS"

          if [[ "$STATUS" == "200" ]]; then
            echo "✅ App is reachable!"
          else
            echo "❌ App not reachable. Status: $STATUS"
            exit 1
          fi

      - name: Terraform Destroy (only in dev)
        if: ${{ steps.get-stage.outputs.stage == 'dev' }}
        run: |
          echo "Destroying dev resources..."
          terraform destroy -auto-approve -var="enable_protection=false" -var-file="${{ steps.get-stage.outputs.stage }}_config.tfvars"
