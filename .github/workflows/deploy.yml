name: Deploy Java application via Terraform

on:
    push:
        branches:
            - main
            - feature/pipline-enhancement
        tags:
            - 'deploy-dev'
            - 'deploy-prod'
    
jobs:
    Terraform-deployment:
        name: terraform deploy
        runs-on: ubuntu-latest

        env:
            AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
            AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            
        steps:
            - name: Checkout code
              uses: actions/checkout@v3

            - name: Setup Terrraform
              uses: hashicorp/setup-terraform@v2
              with:
                terraform_version: 1.6.6

            - name: Determine stage
              id: get-stage
              run: |
               if [[ "${GITHUB_REF}" == "refs/heads/main" ]]; then
                  echo "stage=dev" >> "$GITHUB_OUTPUT"

               elif [[ "${GITHUB_REF}" == "refs/tags/feature/pipline-enhancement" ]]; then
                  echo "stage=dev" >> "$GITHUB_OUTPUT"

               elif [[ "${GITHUB_REF}" == "refs/tags/deploy-prod" ]]; then
                  echo "stage=prod" >> "$GITHUB_OUTPUT"

               
               elif [[ "${GITHUB_REF}" == "refs/tags/deploy-dev" ]]; then
                  echo "stage=dev" >> "$GITHUB_OUTPUT"
               else
                  echo "Unsupported ref: ${GITHUB_REF}"
                  exit 1
               fi
            
            - name: Terraform Init
              run: terraform init

            - name: Terraform Formating
              run: terraform fmt -check
              
            - name: Terrraform syntax validation
              run: terraform validate

            - name: Terraform plan
              run: terraform plan -var-file="${{ steps.get-stage.outputs.stage }}_config.tfvars"

            - name: Terraform Apply
              run: terraform apply -auto-approve -var-file="${{ steps.get-stage.outputs.stage }}_config.tfvars"

            - name: Wait for EC2 to be ready on port 80 !!!
              run: |
               EC2_PUBLIC_IP=$(terraform output -raw ec2_public_ip)

               for i in {1..15}; do

                  if curl -s --head http://$EC2_PUBLIC_IP | grep "200 OK" > /dev/null; then
                      echo " App is reachable on port 80!"
                    exit 0
                  else
                    echo " Not ready yet, retrying in 10s..."
                    sleep 10
                  fi
               done
               echo "App is not reachable on port 80 after multiple attempts."
               exit 1

